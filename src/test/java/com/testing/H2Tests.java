package com.testing;

import org.h2.tools.RunScript;
import org.h2.tools.Server;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * $ ls -l /Users/a1353612/pya.*
 * -rw-r--r--  1 py  NA\Domain Users  20480 Jun  9 13:37 /Users/a1353612/pya.mv.db
 * -rw-r--r--  1 py  NA\Domain Users    261 Jun  9 13:37 /Users/a1353612/pya.trace.db
 */
public class H2Tests {

    Server h2MemServer;

    private static final String JDBC_DRIVER = "org.h2.Driver";
    private static final String DATABASE_NAME = "pya";
    private static final String DB_URL = "jdbc:h2:~/" + DATABASE_NAME;

    private static final String USER = "sa";
    private static final String PASS = "";

    @Before
    public void setup() throws SQLException, ClassNotFoundException {
//        h2MemServer = Server.createPgServer("-tcpPort", "9123", "-tcpAllowOthers").start();
        Class.forName(JDBC_DRIVER);
        String customerSchema = "CREATE TABLE IF NOT EXISTS customer " +
                "(id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL PRIMARY KEY, " +
                " first_name VARCHAR(255), " +
                " last_name VARCHAR(255), " +
                " seen_days INTEGER)";
//        applySql(customerSchema);
        applySqlScript("db/h2/schema.sql");
    }

    @Test
    public void myTest() throws SQLException {
        try {
            var conn = DriverManager.getConnection(DB_URL, USER, PASS);
            var stmt = conn.createStatement();

            String userDataSql1 = "INSERT INTO customer(first_name, last_name, seen_days) " + "VALUES ('Ya1', 'PY1', 30)";
            String userDataSql2 = "INSERT INTO customer(first_name, last_name, seen_days) " + "VALUES ('Ya2', 'PY2', 33)";
            stmt.executeUpdate(userDataSql1);
            System.out.println(userDataSql1);

            stmt.executeUpdate(userDataSql2);
            System.out.println(userDataSql2);

            //
            String sql = "SELECT id, first_name, last_name, seen_days FROM customer";
            ResultSet rs = stmt.executeQuery(sql);

            while (rs.next()) {
                int id = rs.getInt("id");
                int age = rs.getInt("seen_days");
                String first = rs.getString("first_name");
                String last = rs.getString("last_name");

                // Display values
                System.out.print("ID: " + id);
                System.out.print(", First: " + first);
                System.out.print(", Last: " + last);
                System.out.println(", Seen Days: " + age);
            }

            stmt.close();
            conn.close();
        } catch (Exception se) {
            se.printStackTrace();
        }
    }

    @After
    public void teardown() {
//        h2MemServer.shutdown();
        String customerSchema = "DROP TABLE customer";
        applySql(customerSchema);
    }

    private void applySqlScript(String file) {
        try (var conn = DriverManager.getConnection(DB_URL, USER, PASS)) {
            FileInputStream is = new FileInputStream(new File(file));
            InputStreamReader reader = new InputStreamReader(is);

            System.out.println("---------------------------------------");
            System.out.println("executing: " + readInputStreamAsString(new FileInputStream(new File(file))));
            ResultSet execute = RunScript.execute(conn, reader);
            if (execute != null) {
                while (execute.next()) {
                    System.out.println("executed: " + reader);
                }
            }
            System.out.println("---------------------------------------");
        } catch (Exception se) {
            se.printStackTrace();
        }
    }

    private void applySql(String customerSchema) {
        try (var conn = DriverManager.getConnection(DB_URL, USER, PASS);
             var stmt = conn.createStatement()) {
            int i = stmt.executeUpdate(customerSchema);
            System.out.println("---------------------------------------");
            if (i > 0) {
                System.out.println("SUCCESS: " + i + ": " + customerSchema);
            } else {
                System.out.println("SUCCESS: " + customerSchema);
            }
            System.out.println("---------------------------------------");
        } catch (Exception se) {
            se.printStackTrace();
        }
    }

    public static String readInputStreamAsString(InputStream in)
            throws IOException {

        BufferedInputStream bis = new BufferedInputStream(in);
        ByteArrayOutputStream buf = new ByteArrayOutputStream();
        int result = bis.read();
        while(result != -1) {
            byte b = (byte)result;
            buf.write(b);
            result = bis.read();
        }
        return buf.toString();
    }
}
